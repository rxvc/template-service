apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'
apply plugin: 'application'
apply plugin: 'gradle-one-jar'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply from: 'configuration.gradle'

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

tasks.withType(Compile) {
    options.encoding = 'UTF-8'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.flywaydb:flyway-gradle-plugin:3.0'
        classpath 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.3.2'
        classpath 'com.github.rholder:gradle-one-jar:1.0.3'
    }
}

sourceSets {
    intTest {
        java {
            srcDir 'src/integration/java'
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
        resources {
            srcDir 'src/integration/resources'
        }
    }
}


// Set our project variables
project.ext {
    dropwizardVersion = '0.7.0'
    configurationFile = 'hello-world-service.yml'
    generatedSources = ['net/hidrocentro/factronica/hello/world/**/dao/**/*']
}
// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/content/repositories/public"
    }
}

configurations {
    intTestCompile.extendsFrom(testCompile)
    intTestRuntime.extendsFrom(testRuntime)
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile(
            'io.dropwizard:dropwizard-core:' + dropwizardVersion,
            'io.dropwizard:dropwizard-testing:' + dropwizardVersion,
            'io.dropwizard:dropwizard-hibernate:' + dropwizardVersion,
            'org.slf4j:slf4j-api:1.7.5',
            'org.postgresql:postgresql:9.3-1101-jdbc41',
            'commons-validator:commons-validator:1.4.0',
            'com.google.code.findbugs:annotations:3.0.0'

    )
    testCompile(
            'junit:junit:4.11',
            'org.hamcrest:hamcrest-core:1.3',
            'org.mockito:mockito-all:1.9.5',
            'org.unitils:unitils-core:3.4.2'
    )
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

// The main class of the application
mainClassName = 'net.hidrocentro.factronica.hello.world.ServiceApplication'

// Configure the run task to start the Dropwizard service
run {
    dependsOn configureService
    args 'server', configurationFile
}

test {
    dependsOn configureService, pmdMain, pmdTest, pmdIntTest, findbugsMain, findbugsTest, findbugsIntTest
}

flyway {
    user = flyway.user
    password = flyway.password
    url = flyway.url
    schemas = [flyway.schemas]
}

tasks.withType(org.flywaydb.gradle.task.AbstractFlywayTask) {
    dependsOn += configureService
}

tasks.withType(Test) {
    dependsOn += configureService
    // show standard out and standard error of the test JVM(s) on the console
    testLogging {
        showStandardStreams = true
        displayGranularity = 2
        exceptionFormat = 'full'
        events 'started', 'passed'
    }

    outputs.upToDateWhen { false }
}

task intTest(type: Test) {
    testClassesDir = sourceSets.intTest.output.classesDir
    classpath = sourceSets.intTest.runtimeClasspath
}

task oneJar(type: OneJar, dependsOn: clean) {
    mainClass = mainClassName
    additionalDir = file('src/main/resources')
}

pmd {
    targetJdk = '1.7'
    ruleSetFiles = files('config/pmd/pmd.xml')
    ruleSets = [
            'basic',
            'braces',
            'clone',
            'codesize',
            'coupling',
            'imports',
            'logging-java',
            'migrating',
            'strictexception',
            'strings',
            'typeresolution',
            'unusedcode',
    ]
}

pmdTest {
    ruleSetFiles = files('config/pmd/pmd-test.xml')
    ruleSets = [
            'basic',
            'braces',
            'clone',
            'codesize',
            'coupling',
            'logging-java',
            'migrating',
            'strictexception',
            'strings',
            'typeresolution',
            'unusedcode',
    ]
}

pmdIntTest {
    ruleSetFiles = files('config/pmd/pmd-test.xml')
    ruleSets = [
            'basic',
            'braces',
            'clone',
            'codesize',
            'coupling',
            'logging-java',
            'migrating',
            'strictexception',
            'strings',
            'typeresolution',
            'unusedcode',
    ]
}

findbugs {
    toolVersion = '3.0.0'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


jacoco {
    toolVersion = '0.7.1.201405082137'
    excludes = generatedSources
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(generatedSources)
    }
}

idea {
    module {
        sourceDirs += file('src/main/resources')
    }
}
